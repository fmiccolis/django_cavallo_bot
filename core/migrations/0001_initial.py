# Generated by Django 3.1.7 on 2021-04-04 20:44

import core.models
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Address',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('raw', models.CharField(help_text='<strong>Obbligatorio.</strong><br><br>Indirizzo composto da tutti i campi.<br>Se questo metodo viene utilizzato, si perdono informazioni utili', max_length=200, verbose_name='Completo')),
                ('street', models.CharField(blank=True, help_text="Via, viale, strada o piazza dell'indirizzo", max_length=50, null=True, verbose_name='Via/Viale/Piazza')),
                ('street_number', models.CharField(blank=True, help_text="Numero civico dell'indirizzo.<br>Pu√≤ contenere anche lettere e simboli", max_length=10, null=True, verbose_name='Numero civico')),
                ('city', models.CharField(blank=True, max_length=50, null=True, verbose_name='Citt√†')),
                ('postal_code', models.CharField(blank=True, help_text='Codice di avviamento postale', max_length=10, null=True, verbose_name='CAP')),
                ('region', models.CharField(blank=True, max_length=50, null=True, verbose_name='Regione')),
                ('state', models.CharField(blank=True, max_length=50, null=True, verbose_name='Stato')),
                ('status', models.BooleanField(default=True, help_text="Se attivo, l'indirizzo pu√≤ essere utilizzato per definire un evento", verbose_name='Stato')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'address',
                'verbose_name_plural': 'addresses',
                'db_table': 'address',
            },
        ),
        migrations.CreateModel(
            name='BotMessage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Questo √® il nome del messaggio che verr√† utilizzato nel codice per identificare il corpo del messaggio stesso.<br><strong>Non ci possono essere spazi fra le parole.</strong><br>Una volta creato non potr√† essere modificato.', max_length=50, unique=True, validators=[core.models.validate_spaces], verbose_name='Nome')),
                ('body', models.TextField(help_text="Questo √® il corpo del messaggio che viene effettivamente mostrato all'utente.<br>Utilizza le <strong>{}</strong> con una parola all'interno per sostituire quella porzione del testo stesso con un'informazione personale dell'utente.<br>Ad esempio usa {nome} per inserire il nome dell'utente.", verbose_name='Corpo')),
                ('description', models.TextField(blank=True, help_text='Aggiungi una descrizione dettagliata o meno sul messaggio.<br>Ad esempio se il messaggio deve comparire alla pressione di un pulsante.<br>Il campo non √® richiesto quindi pu√≤ essere lasciato vuoto', null=True, verbose_name='Descrizione')),
                ('status', models.BooleanField(default=True, help_text='Usa questo campo per definire se il messaggio deve essere preso in considerazione nel codice.<br>Puoi scegliere di disattivarlo per poi usarlo in futuro.', verbose_name='Stato')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'bot_message',
                'verbose_name_plural': 'bot_messages',
                'db_table': 'bot_message',
            },
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Nome della categoria', max_length=50, unique=True, verbose_name='Name')),
                ('description', models.TextField(blank=True, help_text='Descrizione della categoria', null=True, verbose_name='Description')),
                ('emoji', models.CharField(default='üê¥', help_text='Emoji della categoria', max_length=10, verbose_name='Emoji')),
                ('status', models.BooleanField(default=True, help_text='Se attivo, la categoria pu√≤ essere utilizzata per definire un evento', verbose_name='Stato')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'category',
                'verbose_name_plural': 'categories',
                'db_table': 'category',
            },
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text="Nome dell'evento", max_length=50, verbose_name='Name')),
                ('description', models.TextField(blank=True, help_text="Informazioni aggiuntive sull'evento", null=True, verbose_name='Descrizione')),
                ('url', models.CharField(help_text="Url dell'album dove sono contenute le foto dell'evento.<br>Pu√≤ essere anche il percorso al file zip con le foto", max_length=200, verbose_name='Url album')),
                ('date', models.DateField(verbose_name='Data evento')),
                ('code', models.CharField(default=core.models.event_code, help_text="Codice univoco dell'evento. Serve a trovare in modo puntuale l'evento.", max_length=6, verbose_name='Codice')),
                ('is_public', models.BooleanField(help_text="Se attivo, l'evento √® indicizzato e pu√≤ comparire nelle liste di ricerca.<br>Se disattivo, l'evento √® da considerarsi privato √® pu√≤ essere visto solo da chi possiede il codice univoco", verbose_name='Pubblico')),
                ('status', models.BooleanField(default=True, help_text='Se attivo, tutti gli eventi di questo fotografo sono visibili', verbose_name='Stato')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('address', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.address')),
                ('category', models.ForeignKey(on_delete=models.SET(core.models.default_category), to='core.category')),
            ],
            options={
                'verbose_name': 'event',
                'verbose_name_plural': 'events',
                'db_table': 'event',
            },
        ),
        migrations.CreateModel(
            name='Photo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('url', models.CharField(help_text='Url della foto. Pu√≤ essere anche un percorso', max_length=200, verbose_name='Url foto')),
                ('faces', models.FileField(blank=True, default=None, null=True, upload_to=core.models.photo_encodings, verbose_name='Encodings')),
                ('status', models.BooleanField(default=True, help_text='Se attivo, la foto viene utilizzata nella ricerca', verbose_name='Stato')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.event')),
            ],
            options={
                'verbose_name': 'photo',
                'verbose_name_plural': 'photos',
                'db_table': 'photo',
            },
        ),
        migrations.CreateModel(
            name='TelegramUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('username', models.CharField(max_length=50, verbose_name='Username')),
                ('first_name', models.CharField(blank=True, default=None, max_length=50, null=True, verbose_name='Nome')),
                ('last_name', models.CharField(blank=True, default=None, max_length=50, null=True, verbose_name='Cognome')),
                ('url_encodings', models.FileField(blank=True, default=None, null=True, upload_to=core.models.user_files, verbose_name='Encodings')),
                ('url_video', models.FileField(blank=True, default=None, null=True, upload_to=core.models.user_files, verbose_name='Video')),
                ('status', models.BooleanField(default=True, verbose_name='Stato')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'telegram_user',
                'verbose_name_plural': 'telegram_users',
                'db_table': 'telegram_user',
            },
        ),
        migrations.CreateModel(
            name='PhotoMatch',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('accuracy', models.FloatField(help_text="Valore in percentuale sull'accuratezza del match", verbose_name='Accuratezza')),
                ('status', models.BooleanField(default=True, help_text="Se attivo, il match viene mostrato all'utente che lo richiede", verbose_name='Stato')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('photo', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.photo')),
                ('telegram_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.telegramuser')),
            ],
            options={
                'verbose_name': 'photomatch',
                'verbose_name_plural': 'photomatches',
                'db_table': 'photomatch',
            },
        ),
        migrations.CreateModel(
            name='Photographer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Nome da fotografo', max_length=50, verbose_name='Name')),
                ('website', models.URLField(blank=True, help_text='Url del sito web del fotografo', null=True, verbose_name='Sito web')),
                ('instagram', models.URLField(blank=True, help_text='Username del profilo instagram', null=True, verbose_name='Instagram')),
                ('disk_space', models.PositiveIntegerField(default=500, help_text="Lo spazio su disco dedicato all'upload di file zip quando ad esempio non si possiede un sito web dove caricare gli album", verbose_name='Spazio su disco')),
                ('status', models.BooleanField(default=True, help_text='Se attivo, tutti gli eventi di questo fotografo sono visibili', verbose_name='Stato')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('telegram_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.telegramuser')),
            ],
            options={
                'verbose_name': 'photographer',
                'verbose_name_plural': 'photographers',
                'db_table': 'photographer',
            },
        ),
        migrations.AddField(
            model_name='event',
            name='photographer',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.photographer'),
        ),
        migrations.CreateModel(
            name='Authentication',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('token', models.CharField(default=core.models.auth_token, max_length=16, verbose_name='Token')),
                ('expiration', models.DateTimeField()),
                ('is_login', models.BooleanField(default=True)),
                ('telegram_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.telegramuser')),
            ],
            options={
                'verbose_name': 'authentication',
                'verbose_name_plural': 'authentications',
                'db_table': 'authentication',
            },
        ),
    ]
